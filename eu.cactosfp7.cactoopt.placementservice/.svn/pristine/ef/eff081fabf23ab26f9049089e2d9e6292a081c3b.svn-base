package eu.cactosfp7.cactoopt.placementservice.impl;

import java.util.ArrayList;
import java.util.Dictionary;
import java.util.List;

import org.eclipse.emf.cdo.net4j.CDONet4jSession;
import org.eclipse.emf.cdo.transaction.CDOTransaction;
import org.eclipse.emf.cdo.view.CDOView;
import org.osgi.service.cm.ConfigurationException;
import org.osgi.service.cm.ManagedService;

import eu.cactosfp7.cactoopt.placementservice.IPlacementService;
import eu.cactosfp7.cactoopt.placementservice.InitialPlacementAlgorithm;
import eu.cactosfp7.cactoopt.placementservice.config.IPlacementConfigurable;
import eu.cactosfp7.cactoopt.util.CDOOptimisationPlanHandler;
import eu.cactosfp7.cdosession.CactosCdoSession;
import eu.cactosfp7.cdosession.settings.CactosUser;
import eu.cactosfp7.cdosession.util.CdoHelper;
import eu.cactosfp7.cdosessionclient.CdoSessionClient;
import eu.cactosfp7.infrastructuremodels.load.logical.LogicalLoadModel;
import eu.cactosfp7.infrastructuremodels.load.physical.PhysicalLoadModel;
import eu.cactosfp7.infrastructuremodels.logicaldc.core.LogicalDCModel;
import eu.cactosfp7.infrastructuremodels.logicaldc.core.VirtualMachine;
import eu.cactosfp7.infrastructuremodels.physicaldc.core.PhysicalDCModel;
import eu.cactosfp7.optimisationplan.OptimisationPlan;
import eu.cactosfp7.optimisationplan.SequentialSteps;
import eu.cactosfp7.optimisationplan.VmPlacementAction;

/**
 * Implementation of the placement service used to propose a placement of a node on a physical
 * machine.
 * 
 * @author stier, jakub
 *
 */
public abstract class AbstractPlacementService implements IPlacementService, ManagedService {
	//private IOptimisationAlgorithm optimisationService;

	public AbstractPlacementService() {
	}
	
	protected InitialPlacementAlgorithm placementAlgorithm;
	protected IPlacementConfigurable configurable;
	
    @Override
    public String determinePlacement(String vmUuuid) {
    	CactosCdoSession cactosCdoSession = CdoSessionClient.INSTANCE.getService()
                .getCactosCdoSession(CactosUser.CACTOOPT);
                // fetch VM info from CDO server using the session

        // determine placement using CactoOpt placement algorithms
        
 		CDONet4jSession cdoSession = cactosCdoSession.getCdoSession();
// 		CDOView view = cdoSession.openView();
 		CDOTransaction view = cdoSession.openTransaction();
 		
 		LogicalDCModel ldcm = null;
 		PhysicalDCModel pdcm = null;
 		LogicalLoadModel llm = null;
 		PhysicalLoadModel plm = null;
 		OptimisationPlan plan = null;
 		List<VirtualMachine> vmsToPlace = new ArrayList<VirtualMachine>();
 		String pmToPlace = null;
 		
 		// OPTYMISTIC APPROACH - run placement algorithm even if there is an optimisation plan in execution
 		// check if all plans are completed
 		Boolean finished = CDOOptimisationPlanHandler.allPlansFinished(view, cactosCdoSession.getOptimisationPlanPath());
 		
 		if (finished) {
 			ldcm = CDOOptimisationPlanHandler.loadLogicalDc(view, cactosCdoSession.getLogicalModelPath());
 			pdcm = CDOOptimisationPlanHandler.loadPhysicalDc(view, cactosCdoSession.getPhysicalModelPath());
 			llm = CDOOptimisationPlanHandler.loadLogicalLoad(view, cactosCdoSession.getLogicalLoadPath());
 			plm = CDOOptimisationPlanHandler.loadPhysicalLoad(view, cactosCdoSession.getPhysicalLoadPath());
 			
 			VirtualMachine vm = CdoHelper.getVirtualMachineById(ldcm, vmUuuid);
 	 		vmsToPlace.add(vm);
 			
 			plan = this.placementAlgorithm.generateOptimizationPlan(pdcm, ldcm, plm, llm, vmsToPlace);
 			if (plan != null) {
 				SequentialSteps rootStep = (SequentialSteps)plan.getOptimisationStep();
 				if (rootStep.getOptimisationSteps().size() > 0) {
 					VmPlacementAction placement = (VmPlacementAction) rootStep.getOptimisationSteps().get(0);
 					pmToPlace = placement.getTargetHost().getNode().getId();
 				}
 			}
 		}
 		
 		view.close();
        
        return pmToPlace;
    }
    
    public InitialPlacementAlgorithm getPlacementAlgorithm() {
        return this.placementAlgorithm;
    }
    
    @Override
    public void updated(Dictionary<String, ?> properties) throws ConfigurationException {
        this.configurable.updated(properties);
    }
    
}
